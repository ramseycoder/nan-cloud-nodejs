#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tester:server');
var http = require('http');
const path = require('path');
const rootDirectory = path.join(__dirname, '../STORAGE');
const fs = require('fs');
const rimraf = require('rimraf');
const db = require('../config/database');
const rand = require('random-key');
const {
  globalQueries
} = require('../Queries/globalQuerie');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */
db();
var server = http.createServer(app);
const io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */
io.on('connection', socket => {
  console.log('user connected');
  try {
    socket.on('create_folder', async (r) => {
      const data = {
        foldername: folder_path === '' ? 'root' : folder_path.includes('/') ? folder_path.split('/')[folder_path.split('/').length - 1] : folder_path,
        folder: r
      }
      const resu = await globalQueries.setUnderFolder(data);
      if (resu.etat) {
        const resu2 = await globalQueries.ResultFiles(resu.data);
        if (resu2.etat) {
          const r = onSucces(resu2.result);
          socket.emit('success', r);
        }
      }
    });

    socket.on('reload', async () => {
      const folder = folder_path === '' ? 'root' : folder_path.includes('/') ? folder_path.split('/')[folder_path.split('/').length - 1] : folder_path;
      const res = await globalQueries.getFolder(folder);
      if (res.etat) {
        const output = await globalQueries.ResultFiles(res.data);
        if (output.etat) {
          socket.emit('success', onSucces(output.result));
        }
      }
    })

    socket.on('delete', (data) => {
      let p = folder_path === "" ? rootDirectory + `/${data}` : rootDirectory + `/${folder_path}/${data}`;
      if (data.slice(verifPoint(data), data.length) !== data) {
        fs.unlinkSync(p)
        fs.readdir(rootDirectory + `${folder_path === "" ? "": '/'+folder_path }`, (err, files) => {
          const res = onSucces(files, folder_path);
          socket.emit('success', res.files, res.breadcrumb, false);
        })
      } else {
        rimraf.sync(p);
        fs.readdir(rootDirectory + `/${folder_path}`, (err, files) => {
          const res = onSucces(files, folder_path);
          socket.emit('success', res.files, res.breadcrumb, false);
        })
        /* var deleteFolderRecursive = function (p) {
          if (fs.existsSync(p)) {
            fs.readdirSync(p).forEach(function (file, index) {
              var curPath = path + "/" + file;
              if (fs.lstatSync(curPath).isDirectory()) { // recurse
                deleteFolderRecursive(curPath);
              } else { // delete file
                fs.unlinkSync(curPath);
              }
            });
            fs.rmdirSync(path);
          }
        }  */
      };
    });

    socket.on('getFileInfo', async (fileid) => {
      const res = await globalQueries.getFileInfo(fileid);
      if (res.etat) {
        socket.emit('getFileInfo', res.data);
      }
    });

    socket.on('shared', async (data) => {
      data.crypt_link = rand.generate(8);
      const res = await globalQueries.setSharedFolder(data);
      if (res.etat) {
        socket.emit('shared', res.data);
      }
    })

    socket.on('addgetFileSize', async (data) => {
      let name = data.includes('.') ? data.slice(0, verifPoint(data)) : data;
      const res = await globalQueries.getFileSize(name);
      if (res.etat) {
        socket.emit('addgetFileSize', res.data);
      }
    });

    socket.on('removegetFileSize', async (data) => {
      let name = data.includes('.') ? data.slice(0, verifPoint(data)) : data;
      const res = await globalQueries.getFileSize(name);
      if (res.etat) {
        socket.emit('removegetFileSize', res.data);
      }
    });

    socket.on('deleteFiles', async (data) => {
      let Files = [];
      data.forEach(file => {
        Files.push(file.includes('.') ? {
          "type": "file",
          "file": file.slice(0, verifPoint(file))
        } : {
          "type": 'folder',
          "file": file
        });
      });
      const res = await globalQueries.deleteFiles(Files);
      if (res.etat) {
        const folder = folder_path === '' ? 'root' : folder_path.includes('/') ? folder_path.split('/')[folder_path.split('/').length - 1] : folder_path;
        const res = await globalQueries.getFolder(folder);
        if (res.etat) {
          const output = await globalQueries.ResultFiles(res.data);
          if (output.etat) {
            socket.emit('successDelete', onSucces(output.result));
          }
        }
      }
    });

  } catch (e) {

  }
})




function verifImage(str) {
  return ['jpg', 'png', 'gif', 'jpeg'].includes(getType(str));
}

function getType(str) {
  return str.slice(verifPoint(str) + 1, str.length);
}

function verifPoint(str) {
  const tab = [];
  for (let i = 0; i < str.length; i++) {
    if (str[i] === ".") {
      tab.push(i);
    }
  }
  return tab[tab.length - 1];
}

function onSucces(files) {
  if (files.length === 0) {
    return '<p>le dossier est vide</p>';
  } else {
    let bigOutput = `<table>
    <thead>
      <th class="name"><input style="display: inline-block" type="checkbox"
          class="form-check globalCheck">&nbsp;&nbsp;&nbsp;&nbsp;<span
          style="display:inline-block">name</span>
      </th>
      <th class="size">size</th>
      <th class="modified">modified</th>
    </thead>
    <tbody>`;
    let output = '';
    files.forEach(donne => {
      let el = `<tr onclick='showRightSide(${donne._id})'>`;
      if (getType(donne.name) === donne.name) {
        el += `
            <td class="nameOptions">
            <div class="left"><img src="/public/images/folder.png" width="50"> <input type="checkbox"
                class="form-check childCheck"><span class="file_name"><a
                href="/app/files/?dir=${donne.name}">${donne.name}</a></span></div>
            <div class="right">${donne.shared ? 'shared' : '<i class="fas fa-share-alt"></i>'}</div>
          </td>
          <td style="text-align: center">${donne.size} ko</td>
          <td style="text-align: center">${donne.date_creation}</td>
        `;
      } else if (getType(donne.name) === "mp4") {
        el += `
          <td class="nameOptions">
          <div class="left"><img src="/public/images/video-player.png" width="50"></i> <input type="checkbox"
              class="form-check childCheck"><span class="file_name">${donne.name}</span></div>
          <div class="right">${donne.shared ? 'shared' : '<i class="fas fa-share-alt"></i>'}</div>
        </td>   
        <td style="text-align: center">${((donne.size/1000)/1000).toFixed(2)} Mo</td>
        <td style="text-align: center">${donne.date_creation}</td>
      `;
      } else if (getType(donne.name) === "mp3") {
        el += `
          <td class="nameOptions">
          <div class="left"><i class="fas fa-audio"></i> <input type="checkbox"
              class="form-check childCheck"><span class="file_name">${donne.name}</span></div>
          <div class="right">${donne.shared ? 'shared' : '<i class="fas fa-share-alt"></i>'}</div>
        </td>
        <td style="text-align: center">${((donne.size/1000)/1000).toFixed(2)}  Mo</td>
        <td style="text-align: center">${donne.date_creation}</td>
      `;
      } else if (getType(donne.name) === "pdf") {
        el += `
          <td class="nameOptions">
          <div class="left"><img src="/public/images/pdf.png" width="50" /></i> <input type="checkbox"
              class="form-check childCheck"><span class="file_name">${donne.name}</span></div>
          <div class="right">${donne.shared ? 'shared' : '<i class="fas fa-share-alt"></i>'}</div>
        </td>
        <td style="text-align: center">${((donne.size/1000)/1000).toFixed(2)}  Mo</td>
        <td style="text-align: center">${donne.date_creation}</td>
      `;
      } else if (getType(donne.name) === "txt") {
        el += `
          <td class="nameOptions">
          <div class="left"><img src="/public/images/txt.png" width="50" /></i> <input type="checkbox"
              class="form-check childCheck"><span class="file_name">${donne.name}</span></div>
          <div class="right">${donne.shared ? 'shared' : '<i class="fas fa-share-alt"></i>'}</div>
        </td>
        <td style="text-align: center">${((donne.size/1000)/1000).toFixed(2)}  Mo</td>
        <td style="text-align: center">${donne.date_creation}</td>
      `;
      } else if (verifImage(donne.name)) {
        el += `
          <td class="nameOptions">
          <div class="left"><img src="/public/images/pictures.png" width="50"> <input type="checkbox"
              class="form-check childCheck"><span class="file_name">${donne.name}</span></div>
          <div class="right">${donne.shared ? 'shared' : '<i class="fas fa-share-alt"></i>'}</div>
        </td>
        <td style="text-align: center">${((donne.size/1000)/1000).toFixed(2)}  Mo</td>
        <td style="text-align: center">${donne.date_creation}</td>
      `;
      } else {
        el += `
        <td class="nameOptions">
        <div class="left"><i class="fas fa-file"></i> <input type="checkbox"
            class="form-check childCheck"><span class="file_name">${donne.name}</span></div>
        <div class="right">${donne.shared ? 'shared' : '<i class="fas fa-share-alt"></i>'}</div>
      </td>
      <td style="text-align: center">${((donne.size/1000)/1000).toFixed(2)} Mo</td>
      <td style="text-align: center">${donne.date_creation}</td>
    `;
      }
      el += "</tr>";
      output += el;
    });
    bigOutput += output;
    bigOutput += `</tbody></table>`;
    return bigOutput;
  }
}


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  console.log('Listening on ' + bind);
}